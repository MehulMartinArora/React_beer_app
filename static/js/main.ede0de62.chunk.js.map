{"version":3,"sources":["components/display.js","App.js","serviceWorker.js","index.js"],"names":["Display","tickers","peoplelist","length","map","person","name","tagline","firstbrewd","id","description","image_url","className","key","src","alt","App","state","image","cryptocurrency","homepage","market_data","addPerson","newPerson","newarr","setState","city","axios","get","then","resolve","data","alert","console","log","display","this","dumble","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kSA+BeA,G,YA3BC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAMTC,EAAaD,EAAQE,OAASF,EAAQG,KAAK,SAAAC,GAAU,IAElDC,EAAkDD,EAAlDC,KAAKC,EAA6CF,EAA7CE,QAAQC,EAAqCH,EAArCG,WAAWC,EAA0BJ,EAA1BI,GAAGC,EAAuBL,EAAvBK,YAAYC,EAAWN,EAAXM,UAE5C,OAAQ,yBAAKC,UAAU,WAAWC,IAAKJ,GACvC,yBAAKG,UAAU,gBACnB,4BAAKN,GACL,yBAAKM,UAAU,QAASE,IAAKH,EAAWI,IAAI,KAC5C,sCAAYR,GACZ,2BAAIC,GACJ,2BAAIE,QAIE,4BACN,OACI,yBAAKE,UAAU,eACVV,K,iBCsGEc,E,4MAzHbC,MAAM,CAAEC,MAAM,GACNR,YAAa,GACbS,eAAe,GACfC,SAAS,GACTC,YAAY,GACZpB,QAAQ,I,EAOlBqB,UAAY,SAACC,GASZ,IAAIC,EAAS,CAACD,GAId,EAAKE,SAAS,CACZC,KAAOF,K,kEAMU,IAAD,OAIjBG,IAAMC,IAAN,oCACEC,MAAM,SAAAC,GACFA,EAAQC,KAAK5B,OAAS,EAEzB6B,MAAM,wCAGNC,QAAQC,IAAIJ,GACZ,EAAKL,SAAS,CACZL,SAASU,EAAQC,OAKnBE,QAAQC,IAAI,EAAKjB,MAAMG,gB,+BAwCxB,IAAIe,EASN,OAPkC,IAA7BC,KAAKnB,MAAMG,SAASjB,SAErBgC,EAAU,kBAAC,EAAD,CAASlC,QAASmC,KAAKnB,MAAMG,YAMzC,yBAAKR,UAAU,OACb,wBAAIA,UAAU,sBAAd,YAECuB,OAZCE,O,GA5FUC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.ede0de62.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Display.css'\r\n\r\n\r\nconst Display = ({ tickers }) => {\r\n\r\n    \r\n\r\n   \r\n    \r\n    const peoplelist = tickers.length ? tickers.map( person =>{\r\n        \r\n        let {name,tagline,firstbrewd,id,description,image_url}=person;\r\n\r\n        return( <div className='outerbox' key={id}>\r\n        <div className=\"responseSpan\">\r\n    <h3>{name}</h3>\r\n    <img className=\"image\"  src={image_url} alt=\"\"></img>\r\n    <p>tagline:{tagline}</p>\r\n    <p>{firstbrewd}</p>\r\n    <p>{description}</p>\r\n  \r\n    </div>\r\n        </div>)\r\n    }) : (<p></p>);\r\n    return(\r\n        <div className='display-div'>\r\n            {peoplelist}\r\n        </div>\r\n    );\r\n}\r\nexport default Display;\r\n    ","import React from 'react';\n//import { Map, GoogleApiWrapper, Marker  } from 'google-maps-react';\nimport './App.css';\nimport Display from './components/display';\n//import Info from './components/info';\nimport axios from 'axios';\n\nclass App extends React.Component{\n  state={ image:{},\n          description: [],\n          cryptocurrency:[],\n          homepage:[],\n          market_data:[],\n          tickers:[]\n\n}\n \n\n\n\naddPerson = (newPerson) =>{\n  \n  //var present = new Date();\n  //const year =  present.getFullYear();\n  //const date =  present.getDate();\n  //const month =  present.getMonth()+1;\n  //newPerson.id = Math.floor(Math.random()*10);\n // console.log(newPerson);\n // this.state.people.push(newPerson) never update state where you change the original value\n let newarr = [newPerson];\n //console.log(newarr)\n\n \n this.setState({\n   city : newarr\n })\n \n}\n\n\ncomponentDidMount(){\n \n // console.log(newarr[0])\n const cors = `https://cors-anywhere.herokuapp.com/` \n  axios.get(`https://api.punkapi.com/v2/beers`)\n   .then( resolve => {\n     if(resolve.data.length < 1)\n     {//console.log(resolve.data);\n     alert(\"please search with perfect spelling\");\n    }\n            else{\n     console.log(resolve);\n     this.setState({\n       homepage:resolve.data,\n       \n     })\n\n\n     console.log(this.state.homepage)\n    //  //this.setState({\n    //    description : resolve.data.description[`${lang}`],\n    //    image : resolve.data.image,\n    //    cryptocurrency: resolve.data.categories,\n    //    homepage:[resolve.data.links.homepage[0],resolve.data.links.repos_url.github[0]], \n    //    tickers:resolve.data.tickers,\n    //    market_data:resolve.data.market_data.current_price \n        \n    //   })\n    //   // values = {\n      //   'it': 'Italian input',\n      //   'en-US': 'English (United States) input',\n      //   'en': 'English input',\n      //   'de': 'German input'\n      // };\n    \n     \n    }}\n    )\n  //console.log(this.state.description)\n // navigator.geolocation.getCurrentPosition(function(position) {\n    //console.log(\"Latitude is :\", position.coords.latitude);\n    //console.log(\"Longitude is :\", position.coords.longitude);\n    //var latt = position.coords.latitude;\n    //var long = position.coords.longitude;\n    //const api_key = `AIzaSyCSWPtEdFxt9M_Xa6trJf0zY9zzxYXXhqs`;\n    //console.log(latt)\n  //});\n }\n\n\n\n//componentDidUpdate(prevProp, PrevState){\n  //console.log(\"yes it is\")\n  //console.log(prevProp, PrevState);\n  //console.log(this.state)\n//}\n  render(){\n    //dekh info re niche waale jitta bhi tag hain sab ne\n    let display;\n    let dumble;\n    if(this.state.homepage.length!==0)\n    {\n      display = <Display tickers={this.state.homepage} ></Display>;\n\n    }\n\n   \n  return (\n    <div className=\"App\">\n      <h1 className='center purple-text'>beer-app</h1>\n      \n      {display}\n      {dumble}\n  \n  \n  {/*<h2>{this.state.cryptocurrency[0]}</h2>\n      <img src={this.state.image.large} alt=\"\"></img>\n  <h1>{this.state.description}</h1>\n  <p>{this.state.market_data.aed}</p>\n  \n  <a href={this.state.homepage[0]}>click here to go to homepage</a><br/>\n  <a href={this.state.homepage[1]}>click here to go to repos_url</a>\n  <Display tickers={this.state.tickers}></Display> */\n  }\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}